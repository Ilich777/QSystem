variables:
  varPort: ${PORT}
  varCreds: ${OAuth2Creds}
  varPostgres: ${POSTGRES}
  varSession: ${SESSION}
  varApi: ${API}
stages:
    - build_backend
    - build_frontend
    - run_server
    - k8s
build_backend:
  stage: build_backend
  image: docker:stable
  tags:
    - gitlab-docker
  services:
    - docker:dind
  before_script:
    - docker login -u DeployQS -p ${ACCESS_TOKEN} gitlab.ektu.kz:5050
  script:
    - docker build --build-arg port=${varPort} --build-arg creds=${varCreds} --build-arg postgres=${varPostgres} --build-arg session=${varSession} --build-arg api=${varApi} -t backend ./backend
  artifacts:
    paths:
      - backend/dist/
  when: always
build_frontend:
  stage: build_frontend
  image: docker:stable
  tags:
    - gitlab-docker
  services:
    - docker:dind
  before_script:
    - docker login -u DeployQS -p ${ACCESS_TOKEN} gitlab.ektu.kz:5050
  script:
    - docker build -t frontend ./frontend/terminal
  artifacts:
    paths:
      - frontend/terminal/build
  when: always
final_job:
  stage: run_server
  image: docker:stable
  tags:
    - gitlab-docker
  services:
    - docker:dind
  before_script:
    - docker login -u DeployQS -p ${ACCESS_TOKEN} gitlab.ektu.kz:5050
  script:
    - docker build --build-arg BACKEND_PATH=./backend/dist/ --build-arg FRONTEND_PATH=./frontend/build/ -t $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID .
    - docker push $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID
  when: always
  needs:
    - job: build_backend
      artifacts: true
    - job: build_frontend
      artifacts: true
deploy-k8s:
  stage: k8s
  variables:
    KUBE_CONTEXT: kubernetes/gitlab-agent:km-agent
  image:
    name: gitlab.ektu.kz:5050/kubernetes/gitlab-agent:latest
    entrypoint: ['']
  tags:
    - k8s-main-runner
  before_script:
    - sed -i -e "s,<IMAGE>,$CI_REGISTRY_IMAGE:$CI_PIPELINE_ID,g" ./qsystem.yaml
  script:
    - kubectl apply -f ./qsystem.yaml -n default
  when: always

